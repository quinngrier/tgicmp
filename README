                 Type-generic integer comparisons in C

1. Overview
------------------------------------------------------------------------

One of the difficulties with C is its surprising behavior when comparing
integers with different types. For example, -1 < 0u is conceptually true
but actually false. This is because of the usual arithmetic conversions,
which are the rules for consolidating operands with different types. In
this example, the operands have types int and unsigned int, causing the
int to be converted to unsigned int. Because this conversion is modular,
the comparison becomes UINT_MAX < 0u, which is false.

This difficulty can only arise when one operand has unsigned type and
the other has signed type and negative value. Depending on the types,
the usual arithmetic conversions can convert the negative value to an
unsigned type. Such a conversion is always modular, and the negative
value changes into a nonnegative value. Depending on the values, the
actual result of the comparison can stray from the conceptual result.

The usual advice is to avoid comparisons where one operand has signed
type and the other has unsigned type. Compilers can usually be set to
emit warnings if this is not followed. This is usually easy to follow,
but there can be difficult situations. Fortunately, there is a way to
compute the conceptual result of an integer comparison no matter what
types and values are involved.

Let x and y be integers with any types and values, with the goal being
to compute the conceptual result of x < y. Notice that x < 0 and y < 0
are always conceptual, so (x < 0) == (y < 0) tests if both x and y are
negative or both are nonnegative. In this case, x < y itself is always
conceptual. Otherwise, exactly one of x and y is negative, so x < 0 is
the conceptual result of x < y. Combining these two possibilities into
one computation produces (x < 0) == (y < 0) ? x < y : x < 0, which is
always the conceptual result of x < y. The other comparison operators
can be computed from this one. For the complete formal development of
this idea, see Section 3.

Included along with this file is a header named tgicmp.h that defines
six macros for performing these type-generic integer comparisons. The
macros are named TGI{LT,GT,LE,GE,EQ,NE} and correspond in the obvious
way to the comparison operators. Each takes two arguments and returns
the appropriate result. For the complete specification of the header,
see Section 2.

2. Header specification
------------------------------------------------------------------------

The tgicmp.h header defines six macros for performing type-generic
integer comparisons. If the header is included, it reserves the macro
names for use as specified. The header can be included multiple times
without any problems.

The six macros are TGILT, TGIGT, TGILE, TGIGE, TGIEQ, and TGINE, which
correspond to the usual comparison operators <, >, <=, >=, ==, and !=,
respectively. Each macro takes two arguments, each of which must be an
expression with integer type but may otherwise have any type and value.
Invalid arguments, in particular those with real floating type, always
cause syntax errors. The macro expansion is a parenthesized expression
with type int and value 1 if the corresponding comparison of the first
and second arguments is conceptually true, or 0 if not. The arguments
are always evaluated more than once. If the arguments are suitable for
use in preprocessing directives, so is the expansion. If the arguments
are integer constant expressions, so is the expansion.

3. Formal development
------------------------------------------------------------------------

This section rigorously develops the ideas behind type-generic integer
comparisons. The 2011 revision of the C standard will be assumed. The
concepts also apply to all older revisions of the standard, but minor
changes may be necessary. Official copies of the standard can only be
purchased, but several drafts with only minor differences are freely
available and should be easy to find. A draft would be included with
this file, but the copyright information is unclear.

A relational or equality expression whose operands have integer type is
called an integer comparison. The result of an integer comparison as if
the usual arithmetic conversions were not performed on its operands is
called the conceptual result of the comparison. An expression is said to
conceptualize an integer comparison if the result of the expression is
the conceptual result of the comparison. An integer comparison is said
to be conceptual if it conceptualizes itself. If an integer comparison
is conceptual, it is said to be strongly conceptual if neither operand
has its value changed by the usual arithmetic conversions, or weakly
conceptual if not.

Here are some examples of integer comparisons with various properties:

    Integer comparison | Conceptual result | Result | Conceptuality
   --------------------+-------------------+--------+---------------
      -1 < 0           |         1         |   1    |    Strong
      -1 < 0u          |         1         |   0    |     None
       0 < 0u          |         0         |   0    |    Strong
      -1 < UINT_MAX    |         1         |   0    |     None
      -2 < UINT_MAX    |         1         |   1    |     Weak

The usual arithmetic conversions lead to what could be called the
fundamental theorem of integer comparisons: an integer comparison is
strongly conceptual if and only if both operands have signed type after
promotion or both have nonnegative value. This is important not only in
theory, but for understanding when comparisons in practical code behave
as intended.

Let x and y be integers with any types and values. As shown by the above
examples, the integer comparison x < y is not conceptual in general. The
goal is therefore to construct an expression that conceptualizes x < y.

The first observation is that the integer comparison x < 0 is strongly
conceptual. This follows easily from the fundamental theorem: If x has
nonnegative value, then both x and 0 have nonnegative value. Otherwise,
x has negative value, and thus signed type. Signed types never promote
to unsigned int, so x has signed type after promotion. 0 trivially has
signed type after promotion since it has type int. In either case, the
result follows from the fundamental theorem.

------------------------------------------------------------------------

The authors of this file have waived all copyright and
related or neighboring rights to the extent permitted by
law as described by the CC0 1.0 Universal Public Domain
Dedication. You should have received a copy of the full
dedication along with this file, typically as a file
named <CC0-1.0.txt>. If not, it may be available at
<https://creativecommons.org/publicdomain/zero/1.0/>.
